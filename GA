import copy
import random
import matplotlib.pyplot as plt
import numpy as np
import math
import time
from Chromosome_10 import Chromosome_10
plt.rcParams['font.family'] = ['sans-serif']
plt.rcParams['font.sans-serif'] = ['SimHei']

class GeneticAlgorithm:

    def __init__(self, pm, pc, pop_size, max_gen):
        self.pm = pm
        self.pc = pc
        self.pop_size = pop_size
        self.max_gen = max_gen
        self.pop = []
        self.bests = [0] * max_gen
        self.g_best = 0

    #algorithmic main function
    def ga(self):
        self.init_pop()
        best = self.find_best()
        self.g_best = copy.deepcopy(best)
        fitness = [0] * self.pop_size  #Initially each individual's fitness value is set to 0
        for i in range(self.max_gen):
            self.select()
            self.cross()
            self.mutation()
            best = self.find_best()
            self.bests[i] = best
            if self.g_best.fitness < best.fitness:
                self.g_best = copy.deepcopy(best)
            fitness[i] = (math.log((1-self.g_best.fitness)/self.g_best.fitness))
            print((math.log((1-self.g_best.fitness)/self.g_best.fitness)))
        print("optimal：", self.g_best.code)

        # plt
        plt.figure(1)
        x = range(self.max_gen)
        plt.plot(x, fitness)
        plt.ylabel('network load variance')
        plt.xlabel('Number of iterations (times)')
        filename = f"C:/Users/Leona/Desktop/图/AUV_5/result_{int(time.time())}.svg"
        #plt.savefig(filename, format='svg')
        plt.show()

    # Initialising populations
    def init_pop(self):
        for i in range(self.pop_size):
            chromosome = Chromosome_10()
            self.pop.append(chromosome)

    # Crossover operation
    def cross(self):

        for i in range(int(self.pop_size)):
            if self.pc > random.random():
                j = random.randint(0, self.pop_size-1)
                if i >= len(self.pop) or j >= len(self.pop):
                    continue
                pop_i = self.pop[i]
                pop_j = self.pop[j]
                crossover_point = random.randint(0, len(self.pop[i].code) - 1)
                for a in range(len(pop_i.code)):
                    column2_to_end_matrix1 = pop_i.code[a][crossover_point:]
                    column2_to_end_matrix2 = pop_j.code[a][crossover_point:]
                    pop_i.code[a][crossover_point:] = column2_to_end_matrix2
                    pop_j.code[a][crossover_point:] = column2_to_end_matrix1

    # Mutation operation
    def mutation(self):
        for i in range(self.pop_size):
            if self.pm > random.random():
                if i >= len(self.pop):
                    continue
                pop = self.pop[i]
                replacement_index = random.randint(0, len(pop.code)-1)
                m = pop.code[:,replacement_index]
                d = pop.rand_init()
                rep=d[:,replacement_index]
                pop.code[:,replacement_index]=rep

    # Selection operation
    def select(self):
        sum_f = 0
        for i in range(self.pop_size):
            if i < len(self.pop):
                self.pop[i].get_fitness1()
        # guarantee fitness > 0
        min = self.pop[0].fitness
        for i in range(self.pop_size):
            if self.pop[i].fitness < min:
                min = self.pop[i].fitness
        if min < 0:
            for i in range(self.pop_size):
                self.pop[i].fitness = self.pop[i].fitness + (-1) * min
        # roulette
        for i in range(self.pop_size):
            sum_f += self.pop[i].fitness
        p = [0] * self.pop_size
        for i in range(self.pop_size):
            p[i] = self.pop[i].fitness / sum_f
        q = [0] * self.pop_size
        q[0] = 0
        for i in range(self.pop_size):
            s = 0
            for j in range(0, i + 1):
                s += p[j]
            q[i] = s
        v = []
        for i in range(self.pop_size):
            r = random.random()
            if r < q[0]:
                v.append(self.pop[0])
            for j in range(1, self.pop_size):
                if q[j - 1] < r <= q[j]:
                    v.append(self.pop[j])
        self.pop = v
        
    # Find the best individual in the current population
    def find_best(self):
        if not self.pop:
            self.init_pop()
        best = copy.deepcopy(self.pop[0])
        for i in range(self.pop_size):
            if best.fitness < self.pop[i].fitness:
               best = copy.deepcopy(self.pop[i])
        return best

if __name__ == '__main__':

    algorithm = GeneticAlgorithm(0.005, 0.8, 100, 100)
    algorithm.ga()
    pass

